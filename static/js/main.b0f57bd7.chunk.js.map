{"version":3,"sources":["styles/GlobalStyles.js","utils/utils.js","styles/card.style.js","components/Card.js","components/Loader.js","const/dataTable.js","styles/modal.style.js","components/Modal.js","styles/indexPage.style.js","pages/IndexPage.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","isValidValue","value","toFixed","CardStyle","styled","div","DateContainer","Product","InStock","Buttons","Card","ingredient","onAddModal","onSubtractModal","onReorderedModal","supplyWarning","amountClass","push","moment","format","className","join","Ingredient","onClick","Loader","base","Airtable","apiKey","ModalHeader","h2","InputContainer","InputLabel","label","Input","input","InputDate","ModalFooter","ModalContainer","Modal","modal","setModal","modalType","updateRecordId","ingredientsInventories","updateList","useState","loader","setLoader","currentInventory","setCurrentInventory","lastOrderDate","setLastOrderDate","updateInputFields","updatedValue","getCurrentValue","find","id","fields","parseFloat","increaseCurrentInventory","subtractCurrentInventory","update","err","records","console","error","onSubmit","visible","onClose","customStyles","height","type","onChange","e","target","placeholder","Container","HeaderText","CardList","IndexPage","setModalType","setUpdateRecordId","setIngredientsInventories","useEffect","select","view","eachPage","fetchNextPage","log","Array","fill","map","_","index","ingredients","updateIngredient","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0f57bd7.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #fff;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n\n  button {\n    outline: none;\n    border: 0;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n\n  input{\n    outline: 0;\n    border-radius: 4px;\n    border: 1px solid #bfc4ca;\n  }\n\n  input::placeholder{\n    color: #BFC4CA;\n  }\n\n  /* Chrome, Safari, Edge, Opera */\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type=number] {\n    -moz-appearance: textfield;\n  }\n\n  #root {\n    width: 95%;\n    margin: 0 auto;\n    font-family: Arial, Helvetica, sans-serif;\n    color: #5F6871;\n  }\n`;\n","export function isValidValue(value) {\n  if (typeof value === \"number\") return value.toFixed(2);\n\n  return \"NAN\";\n}\n\nexport function increaseCurrentInventory(\n  value,\n  updateRecordId,\n  ingredientsInventories\n) {\n  const getCurrentValue = ingredientsInventories.find(\n    (ingredient) => updateRecordId === ingredient.id\n  ).fields[\"Current Inventory\"];\n\n  return parseFloat(value) + parseFloat(getCurrentValue);\n}\n\nexport function subtractCurrentInventory(\n  value,\n  updateRecordId,\n  ingredientsInventories\n) {\n  const getCurrentValue = ingredientsInventories.find(\n    (ingredient) => updateRecordId === ingredient.id\n  ).fields[\"Current Inventory\"];\n\n  return parseFloat(getCurrentValue) - parseFloat(value);\n}\n","import styled from \"styled-components\";\n\nexport const CardStyle = styled.div`\n  height: 256px;\n  border: 1px solid #bfc4ca;\n  border-radius: 4px;\n  padding: 12px 16px;\n`;\n\nexport const DateContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  p {\n    color: #7b8591;\n    font-weight: 400;\n    font-size: 12px;\n  }\n\n  .amount {\n    background: #e5e5e5;\n    border-radius: 4px;\n    padding: 2px;\n    color: #106bef;\n    font-weight: 700;\n    font-size: 11px;\n    padding: 4px;\n    border-radius: 4px;\n\n    &.yellow {\n      background: #f2c94c;\n    }\n\n    &.red {\n      background: #f5554b;\n    }\n  }\n`;\n\nexport const Product = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-top: 22px;\n  padding-bottom: 15px;\n\n  .product-name {\n    font-weight: 700;\n    font-size: 20px;\n    color: #444a51;\n  }\n\n  .number {\n    font-weight: 400;\n    font-size: 16px;\n    color: #848484;\n  }\n\n  .candles {\n    font-weight: 400;\n    font-size: 10px;\n    color: #5f6871;\n  }\n`;\n\nexport const InStock = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 22px 0;\n\n  .stock {\n    font-weight: 700;\n    color: #444a51;\n    font-size: 20px;\n\n    span {\n      margin-left: 10px;\n      font-weight: 700;\n      font-size: 24px;\n      color: #5f6871;\n    }\n  }\n\n  .recorded-on {\n    color: #5f6871;\n    font-size: 10px;\n    font-weight: 400;\n\n    span {\n      font-weight: 700;\n    }\n  }\n`;\n\nexport const Buttons = styled.div`\n  display: grid;\n  gap: 0px 15px;\n  grid-template-columns: 1fr 1fr 1fr;\n\n  button {\n    padding: 11px 8px;\n    border-radius: 4px;\n    font-weight: 700;\n    font-size: 14px;\n    color: #106bef;\n    border: 0;\n    outline: none;\n    cursor: pointer;\n\n    &.add-btn {\n      background: #6fcf97;\n    }\n\n    &.sub-btn {\n      background: #e5e5e5;\n    }\n\n    &.reorder-btn {\n      background: #f2c94c;\n    }\n  }\n`;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { isValidValue } from \"../utils/utils\";\nimport {\n  CardStyle,\n  DateContainer,\n  Product,\n  InStock,\n  Buttons,\n} from \"../styles/card.style\";\n\nconst Card = ({\n  ingredient,\n  onAddModal,\n  onSubtractModal,\n  onReorderedModal,\n}) => {\n  const supplyWarning = isValidValue(ingredient[\"Supply Warning\"]);\n\n  const amountClass = [\"amount\"];\n  if (supplyWarning > 0 && supplyWarning < 100) {\n    amountClass.push(\"yellow\");\n  } else if (supplyWarning < 0) {\n    amountClass.push(\"red\");\n  }\n\n  return (\n    <CardStyle>\n      <DateContainer>\n        <p>{moment(ingredient[\"Last Modified\"]).format(\"MMMM Do YYYY\")}</p>\n        <div className={amountClass.join(\" \")}>{supplyWarning}</div>\n      </DateContainer>\n      <Product>\n        <p className=\"product-name\">{ingredient.Ingredient}</p>\n        <p className=\"number\">{isValidValue(ingredient[\"# of Candles\"])}</p>\n        <p className=\"candles\">Candles</p>\n      </Product>\n      <InStock>\n        <p className=\"stock\">\n          In Stock <span>{isValidValue(ingredient[\"Current Inventory\"])}</span>\n        </p>\n        <p className=\"recorded-on\">\n          Recorded on{\" \"}\n          <span>\n            {moment(ingredient[\"Last Order Placed\"]).format(\" MMMM Do YYYY\")}\n          </span>\n        </p>\n      </InStock>\n      <Buttons>\n        <button className=\"add-btn\" onClick={onAddModal}>\n          Add\n        </button>\n        <button className=\"sub-btn\" onClick={onSubtractModal}>\n          Substract\n        </button>\n        <button className=\"reorder-btn\" onClick={onReorderedModal}>\n          Reordered\n        </button>\n      </Buttons>\n    </CardStyle>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nexport const CardStyle = styled.div`\n  @keyframes shine {\n    from {\n      background-position: 200%;\n    }\n    to {\n      background-position: -40px;\n    }\n  }\n\n  height: 256px;\n  background-image: linear-gradient(\n    90deg,\n    #efefef 0px,\n    #fff 40px,\n    #efefef 80px\n  );\n  background-size: 500px;\n  animation: shine 1s infinite linear;\n`;\n\nfunction Loader() {\n  return <CardStyle></CardStyle>;\n}\n\nexport default Loader;\n","import Airtable from \"airtable\";\n\nconst API_KEY = \"key5jsdadoBUKgDGO\";\nconst BASE_KEY = \"appcoZRLf2easod4B\";\n\nexport const base = new Airtable({ apiKey: API_KEY }).base(BASE_KEY);\n","import styled from \"styled-components\";\n\nexport const ModalHeader = styled.h2`\n  color: #444a51;\n  font-weight: bold;\n  font-size: 18px;\n  padding-bottom: 40px;\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const InputLabel = styled.label`\n  font-size: 14px;\n  font-weight: 400px;\n  color: #444a51;\n  padding-bottom: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 135px;\n  height: 48px;\n  padding-left: 16px;\n  background: #ffffff;\n`;\n\nexport const InputDate = styled.input`\n  width: 250px;\n  height: 38px;\n  padding-left: 16px;\n  background: #ffffff;\n`;\n\nexport const ModalFooter = styled.div`\n  border-top: 1px solid #dfe2e4;\n  margin-top: 30px;\n  padding-top: 10px;\n  display: flex;\n\n  .button {\n    margin-left: 5px;\n    border: 1px solid transparent;\n    border-radius: 4px;\n    font-size: 14px;\n    font-weight: 700;\n    background: #106bef;\n    color: #fff;\n    padding: 12px 15px;\n    cursor: pointer;\n\n    &.button-simple {\n      margin-left: 0;\n      color: #106bef;\n      background: #fff;\n    }\n  }\n`;\n\nexport const ModalContainer = styled.div`\n  .rodal {\n    .rodal-dialog {\n      @media (max-width: 400px) {\n        width: 300px !important;\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport Rodal from \"rodal\";\nimport moment from \"moment\";\nimport { base } from \"../const/dataTable\";\nimport {\n  ModalContainer,\n  ModalHeader,\n  ModalFooter,\n  InputContainer,\n  InputLabel,\n  Input,\n  InputDate,\n} from \"../styles/modal.style\";\nimport {\n  increaseCurrentInventory,\n  subtractCurrentInventory,\n} from \"../utils/utils\";\n\nconst Modal = ({\n  modal,\n  setModal,\n  modalType,\n  updateRecordId,\n  ingredientsInventories,\n  updateList,\n}) => {\n  const [loader, setLoader] = useState(false);\n  const [currentInventory, setCurrentInventory] = useState(\"\");\n  const [lastOrderDate, setLastOrderDate] = useState(\"\");\n\n  const updateInputFields = () => {\n    if (currentInventory) {\n      const updatedValue =\n        modalType === \"add\"\n          ? increaseCurrentInventory(\n              currentInventory,\n              updateRecordId,\n              ingredientsInventories\n            )\n          : subtractCurrentInventory(\n              currentInventory,\n              updateRecordId,\n              ingredientsInventories\n            );\n\n      setLoader(true);\n      base(\"Ingredients Inventory\").update(\n        [\n          {\n            id: updateRecordId,\n            fields: {\n              \"Current Inventory\": updatedValue,\n            },\n          },\n        ],\n        function (err, records) {\n          if (err) {\n            console.error(\"this is error\", err);\n            setLoader(false);\n            setModal();\n            setCurrentInventory(\"\");\n\n            return;\n          }\n          setLoader(false);\n          setCurrentInventory(\"\");\n          updateList(updatedValue);\n          setModal();\n        }\n      );\n    }\n  };\n\n  const updateReorder = () => {\n    if (lastOrderDate) {\n      setLoader(true);\n      base(\"Ingredients Inventory\").update(\n        [\n          {\n            id: updateRecordId,\n            fields: {\n              \"Last Order Placed\": moment(lastOrderDate).format(\"YYYY/MM/DD\"),\n            },\n          },\n        ],\n        function (err, records) {\n          if (err) {\n            console.error(\"this is error\", err);\n            setModal();\n            setLoader(false);\n            setLastOrderDate(\"\");\n            return;\n          }\n          setLoader(false);\n          setLastOrderDate(\"\");\n          setModal();\n        }\n      );\n    }\n  };\n\n  const onSubmit = () => {\n    if (modalType !== \"reordered\") {\n      updateInputFields();\n    } else updateReorder();\n  };\n\n  return (\n    <ModalContainer>\n      <Rodal\n        visible={modal}\n        onClose={setModal}\n        customStyles={{ height: \"fit-content\" }}\n      >\n        <ModalHeader>Supply Update</ModalHeader>\n        <InputContainer>\n          {modalType !== \"reordered\" && (\n            <>\n              <InputLabel>\n                {modalType === \"add\"\n                  ? \"Inventory Increase\"\n                  : \"Inventory Decrease\"}\n              </InputLabel>\n              <Input\n                type=\"number\"\n                value={currentInventory}\n                onChange={(e) => setCurrentInventory(e.target.value)}\n                placeholder=\"00.00\"\n              />\n            </>\n          )}\n          {modalType === \"reordered\" && (\n            <>\n              <InputLabel>Enter Date of Order</InputLabel>\n              <InputDate\n                type=\"date\"\n                placeholder=\"mm/dd/yy\"\n                onChange={(e) => setLastOrderDate(e.target.value)}\n              />\n            </>\n          )}\n        </InputContainer>\n        <ModalFooter>\n          <button onClick={setModal} className=\"button button-simple\">\n            Cancel\n          </button>\n          <button type=\"button\" className=\"button\" onClick={() => onSubmit()}>\n            {loader ? \"Loading...\" : \"Submit\"}\n          </button>\n        </ModalFooter>\n      </Rodal>\n    </ModalContainer>\n  );\n};\n\nexport default Modal;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 50px 0px;\n`;\n\nexport const HeaderText = styled.div`\n  color: black;\n  text-align: center;\n`;\n\nexport const CardList = styled.div`\n  padding: 50px 0px;\n  display: grid;\n  gap: 20px;\n  grid-template-columns: repeat(auto-fill, minmax(290px, 1fr));\n\n  @media (max-width: 631px) {\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  }\n\n  @media (max-width: 580px) {\n    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\n\nimport Card from \"../components/Card\";\nimport Loader from \"../components/Loader\";\nimport Modal from \"../components/Modal\";\nimport { base } from \"../const/dataTable\";\nimport { Container, HeaderText, CardList } from \"../styles/indexPage.style\";\n\nconst IndexPage = () => {\n  const [modal, setModal] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [modalType, setModalType] = useState(\"\");\n  const [updateRecordId, setUpdateRecordId] = useState(\"\");\n  const [ingredientsInventories, setIngredientsInventories] = useState([]);\n\n  useEffect(() => {\n    setLoader(true);\n    base(\"Ingredients Inventory\")\n      .select({\n        view: \"Main View\",\n      })\n      .eachPage((records, fetchNextPage) => {\n        console.log(records[0]);\n        setIngredientsInventories(records);\n        fetchNextPage();\n        setLoader(false);\n      });\n  }, []);\n\n  const updateList = (value) => {\n    console.log(value);\n\n    let updateIngredient = ingredientsInventories.map((ingredient) => {\n      if (updateRecordId === ingredient.id) {\n        return {\n          ...ingredient,\n          ...(ingredient.fields[\"Current Inventory\"] = value),\n        };\n      }\n\n      return ingredient;\n    });\n\n    setIngredientsInventories(updateIngredient);\n  };\n\n  return (\n    <Container>\n      <HeaderText>BRAND & IRON</HeaderText>\n      <CardList>\n        {loader\n          ? Array(12)\n              .fill(0)\n              .map((_, index) => <Loader />)\n          : ingredientsInventories.map((ingredients) => (\n              <Card\n                key={ingredients.id}\n                ingredient={ingredients.fields}\n                onAddModal={() => {\n                  setModal(true);\n                  setUpdateRecordId(ingredients.id);\n                  setModalType(\"add\");\n                }}\n                onSubtractModal={() => {\n                  setModal(true);\n                  setUpdateRecordId(ingredients.id);\n                  setModalType(\"subtract\");\n                }}\n                onReorderedModal={() => {\n                  setModal(true);\n                  setUpdateRecordId(ingredients.id);\n                  setModalType(\"reordered\");\n                }}\n              />\n            ))}\n      </CardList>\n      <Modal\n        modal={modal}\n        modalType={modalType}\n        ingredientsInventories={ingredientsInventories}\n        updateRecordId={updateRecordId}\n        updateList={updateList}\n        setModal={() => setModal(false)}\n      />\n    </Container>\n  );\n};\n\nexport default IndexPage;\n","import React from \"react\";\n\nimport { GlobalStyle } from \"./styles/GlobalStyles\";\nimport IndexPage from \"./pages/IndexPage\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <IndexPage />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/rodal/lib/rodal.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}